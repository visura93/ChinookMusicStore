@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]
@inject DataService DataService
@using Chinook.ClientModels;
@using Chinook.Data;
@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;


@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Tracks == null)
{
    <Loading />
}
else
{
    @*@if (PlaylistId != 0)
    {
        <button class="btn btn-danger" @onclick="DeletePlaylist">Delete Playlist</button>
    }*@

    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                           
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            @if (PlaylistId != 0){
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool refreshPage = false;
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;
    protected override async Task OnParametersSetAsync()
    {
        await InitializePlaylist();
    }
    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();

        if (PlaylistId == 0) { 
            Tracks = await DataService.GetTracksWithFavorite(CurrentUserId);
        }
        else
        {
            Tracks = await DataService.GetTracksWithPlayListId(PlaylistId, CurrentUserId);
        }
  
        await InvokeAsync(StateHasChanged);
        var DbContext = await DbFactory.CreateDbContextAsync();

        if (refreshPage)
        {
            refreshPage = false; // Reset the flag
            StateHasChanged();
        }
    }
    private async Task InitializePlaylist()
    {
        CurrentUserId = await GetUserId();

        if (PlaylistId == 0)
        {
            Tracks = await DataService.GetTracksWithFavorite(CurrentUserId);
        }
        else
        {
            Tracks = await DataService.GetTracksWithPlayListId(PlaylistId, CurrentUserId);
        }

        StateHasChanged(); // Trigger UI update
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track =Tracks.FirstOrDefault(t => t.TrackId == trackId);
        await DataService.SetTrackAsFavorite(trackId, CurrentUserId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        refreshPage = true;
        await OnInitializedAsync();
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        await DataService.SetTrackAsUnfavorite(trackId, CurrentUserId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
        refreshPage = true;
        await OnInitializedAsync();
       
    }

    private async void RemoveTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        await DataService.RemoveTrackFromPlaylist(trackId, PlaylistId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from the playlist.";
        refreshPage = true;
        await OnInitializedAsync();

    }
    private async Task DeletePlaylist()
    {
          await DataService.DeletePlaylist(PlaylistId); // Implement this method in your DataService
            InfoMessage = $"Playlist has been deleted.";
         
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
