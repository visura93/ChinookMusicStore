@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

<div class="mb-3">
    <input type="text" class="form-control" placeholder="Search artist..." @bind="searchTerm" />
    <button class="btn btn-primary" @onclick="Search">Search</button>
</div>

@if (FilteredArtists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    private List<Artist> FilteredArtists { get; set; } = new List<Artist>();
    private string searchTerm = "";

    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        await GetArtists();
    }

    public async Task GetArtists()
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        Artists = await dbContext.Artists.ToListAsync();

        FilteredArtists = string.IsNullOrWhiteSpace(searchTerm)
            ? Artists
            : Artists.Where(artist => artist.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task Search()
    {
        await GetArtists();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }
}
